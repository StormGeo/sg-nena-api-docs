<html xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/x-ms-odc; charset=utf-8">
<meta name=ProgId content=ODC.Database>
<meta name=SourceType content=OLEDB>
<title>Query - fetchSeriesMulti</title>
<xml id=docprops><o:DocumentProperties
  xmlns:o="urn:schemas-microsoft-com:office:office"
  xmlns="http://www.w3.org/TR/REC-html40">
  <o:Description>Connection to the 'fetchSeriesMulti' query in the workbook.</o:Description>
  <o:Name>Query - fetchSeriesMulti</o:Name>
 </o:DocumentProperties>
</xml><xml id=msodc><odc:OfficeDataConnection
  xmlns:odc="urn:schemas-microsoft-com:office:odc"
  xmlns="http://www.w3.org/TR/REC-html40">
  <odc:PowerQueryConnection odc:Type="OLEDB">
   <odc:ConnectionString>Provider=Microsoft.Mashup.OleDb.1;Data Source=$Workbook$;Location=fetchSeriesMulti;Extended Properties=&quot;&quot;</odc:ConnectionString>
   <odc:CommandType>SQL</odc:CommandType>
   <odc:CommandText>SELECT * FROM [fetchSeriesMulti]</odc:CommandText>
  </odc:PowerQueryConnection>
  <odc:PowerQueryMashupData>&lt;Mashup xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://schemas.microsoft.com/DataMashup&quot;&gt;&lt;Client&gt;EXCEL&lt;/Client&gt;&lt;Version&gt;2.110.222.0&lt;/Version&gt;&lt;MinVersion&gt;2.21.0.0&lt;/MinVersion&gt;&lt;Culture&gt;nb-NO&lt;/Culture&gt;&lt;SafeCombine&gt;false&lt;/SafeCombine&gt;&lt;Items&gt;&lt;Query Name=&quot;fetchSeriesMulti&quot;&gt;&lt;Formula&gt;&lt;![CDATA[/*&#13;&#10;This M function fetches a multiple time series in one function call from StormGeo's Nena API. &#13;&#10;&#13;&#10;Written on: 01.12.2022&#13;&#10;By: StormGeo Nena Analysis&#13;&#10;&#13;&#10;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;-&#13;&#10;MIT License&#13;&#10;&#13;&#10;Copyright (c) 2022 StormGeo AS&#13;&#10;&#13;&#10;Permission is hereby granted, free of charge, to any person obtaining a copy&#13;&#10;of this software and associated documentation files (the &quot;Software&quot;), to deal&#13;&#10;in the Software without restriction, including without limitation the rights&#13;&#10;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell&#13;&#10;copies of the Software, and to permit persons to whom the Software is&#13;&#10;furnished to do so, subject to the following conditions:&#13;&#10;&#13;&#10;The above copyright notice and this permission notice shall be included in all&#13;&#10;copies or substantial portions of the Software.&#13;&#10;&#13;&#10;THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&#13;&#10;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&#13;&#10;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&#13;&#10;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER&#13;&#10;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,&#13;&#10;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE&#13;&#10;SOFTWARE.&#13;&#10;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;-&#13;&#10;*/&#13;&#10;&#13;&#10;let&#13;&#10;    Source = let&#13;&#10;    Source = (&#13;&#10;        series_ids as text,&#13;&#10;        from_time as text,&#13;&#10;        to_time as text,&#13;&#10;        optional resolution as text,&#13;&#10;        optional table_format as text,&#13;&#10;        optional nena_username as text,&#13;&#10;        optional nena_password as text&#13;&#10;    ) =&gt;&#13;&#10;        let&#13;&#10;            // Checking that a username and password has been provided&#13;&#10;            username =&#13;&#10;                if nena_username is null then&#13;&#10;                    try&#13;&#10;                        Excel.CurrentWorkbook(){[Name = &quot;NENA_USERNAME&quot;]}[Content]{0}[Column1]&#13;&#10;                    otherwise&#13;&#10;                        error&#13;&#10;                            [&#13;&#10;                                Message.Format = &quot;No username found. You must provide a valid username as a function parameter or define a named range in the Excel&#13;&#10;                        workbook containing the password. The named range must be named exactly: NENA_USERNAME&quot;&#13;&#10;                            ]&#13;&#10;                else&#13;&#10;                    nena_username,&#13;&#10;            password =&#13;&#10;                if nena_password is null then&#13;&#10;                    try&#13;&#10;                        Excel.CurrentWorkbook(){[Name = &quot;NENA_PASSWORD&quot;]}[Content]{0}[Column1]&#13;&#10;                    otherwise&#13;&#10;                        error&#13;&#10;                            [&#13;&#10;                                Message.Format = &quot;No password found. You must provide a valid password as a function parameter or define a named range in the Excel&#13;&#10;                        workbook containing the password. The named range must be named exactly: NENA_PASSWORD&quot;&#13;&#10;                            ]&#13;&#10;                else&#13;&#10;                    nena_password,&#13;&#10;            checkForNullResponse = (resp) =&gt;&#13;&#10;                // Cathcing the octet-stream error.&#13;&#10;                let&#13;&#10;                    metadata = Value.Metadata(resp), #&quot;Status&quot; = if metadata[Response.Status] &lt;&gt; 200 then false else true&#13;&#10;                in&#13;&#10;                    #&quot;Status&quot;,&#13;&#10;            // FETCHING TOKEN&#13;&#10;            token_url = &quot;https://api.nena.no/api/user/login&quot;,&#13;&#10;            headers_token = [#&quot;Content-Type&quot; = &quot;application/json&quot;],&#13;&#10;            postToken = Json.FromValue([UserName = username, Password = password]),&#13;&#10;            token_response = Web.Contents(token_url, [&#13;&#10;                Headers = headers_token,&#13;&#10;                Content = postToken&#13;&#10;            ]),&#13;&#10;            token =&#13;&#10;                if checkForNullResponse(token_response) then&#13;&#10;                    Json.Document(token_response)[Token]&#13;&#10;                else&#13;&#10;                    error Error.Record(&quot;Authentication Error&quot;, &quot;Your username or password is incorrect.&quot;),&#13;&#10;            // Return a token, otherwise raise error.&#13;&#10;            // FETCHING SERIES&#13;&#10;            ConvertResponse = (res) =&gt;&#13;&#10;                // Converts response to tabel&#13;&#10;                let&#13;&#10;                    JsonResponse = Json.Document(res),&#13;&#10;                    table_data = Record.ToTable(JsonResponse[Values]),&#13;&#10;                    #&quot;Renaming Columns&quot; = Table.RenameColumns(table_data, {&quot;Name&quot;, &quot;DateTime&quot;}),&#13;&#10;                    #&quot;Transforming to DateTime&quot; = Table.TransformColumnTypes(&#13;&#10;                        #&quot;Renaming Columns&quot;, {{&quot;DateTime&quot;, type datetime}, {&quot;Value&quot;, type number}}&#13;&#10;                    )&#13;&#10;                in&#13;&#10;                    #&quot;Transforming to DateTime&quot;,&#13;&#10;&#13;&#10;            seriesListRaw = Text.Split(series_ids, &quot;,&quot;),&#13;&#10;    &#13;&#10;            seriesListTrim = List.Generate(&#13;&#10;                () =&gt; [Counter = 0, Code = Text.Trim(seriesListRaw{0})],&#13;&#10;                each [Counter] &lt; List.Count(seriesListRaw),&#13;&#10;                each [ Counter = [Counter] + 1, Code = Text.Trim(seriesListRaw{[Counter] + 1})],&#13;&#10;                each [Code]&#13;&#10;            ),&#13;&#10;                &#13;&#10;            postData = Json.FromValue(&#13;&#10;                [&#13;&#10;                    FromDateTime = from_time,&#13;&#10;                    ToDateTime = to_time,&#13;&#10;                    Resolution = if resolution is null then &quot;*&quot; else resolution,&#13;&#10;                    SeriesIds = seriesListTrim,&#13;&#10;                    UserInfo = [&#13;&#10;                        UserName = username,&#13;&#10;                        Token = token&#13;&#10;                    ]&#13;&#10;                ]&#13;&#10;            ),&#13;&#10;            SendRequest = (post) =&gt;&#13;&#10;                // Function for submitting post request to Nena API&#13;&#10;                let&#13;&#10;                    url = &quot;https://api.nena.no/api/fundamental/series/multi&quot;,&#13;&#10;                    headers = [#&quot;Content-Type&quot; = &quot;application/json&quot;, #&quot;Accept&quot; = &quot;application/json&quot;],&#13;&#10;                    response = Web.Contents(url, [&#13;&#10;                        Headers = headers,&#13;&#10;                        Content = post,&#13;&#10;                        ManualStatusHandling = {500}&#13;&#10;                    ])&#13;&#10;                in&#13;&#10;                    response,&#13;&#10;&#13;&#10;            // Error handling&#13;&#10;            #&quot;First Request&quot; = SendRequest(postData),&#13;&#10;&#13;&#10;            Source =&#13;&#10;                if checkForNullResponse(#&quot;First Request&quot;)&#13;&#10;                // Implementing this logic as sometimes the API returnes null despite correct parameters.&#13;&#10;                then&#13;&#10;                    Json.Document(#&quot;First Request&quot;)&#13;&#10;                else&#13;&#10;                    let&#13;&#10;                        #&quot;Second Request&quot; = SendRequest(postData),&#13;&#10;                        #&quot;Second Response&quot; =&#13;&#10;                            if checkForNullResponse(#&quot;Second Request&quot;) then&#13;&#10;                                Json.Document(#&quot;Second Request&quot;)&#13;&#10;                            else&#13;&#10;                                error Error.Record(&quot;Bad request&quot;, &quot;You have provided an invalid parameter. Try to Refresh the query or double-check your function parameters.&quot;)&#13;&#10;                    in&#13;&#10;                        #&quot;Second Response&quot;,&#13;&#10;&#13;&#10;            // Converting data&#13;&#10;            extract_series = (num) =&gt;  // Function for extracting the series and renaming to series id code.&#13;&#10;            let&#13;&#10;                entry = Source{num},&#13;&#10;                vals = entry[Values],&#13;&#10;                name = entry[Meta][code],&#13;&#10;                #&quot;Table of values&quot; = Record.ToTable(vals),&#13;&#10;                #&quot;Rename&quot; = Table.RenameColumns(#&quot;Table of values&quot;, {&quot;Value&quot;, name})&#13;&#10;            in&#13;&#10;                #&quot;Rename&quot;,&#13;&#10;&#13;&#10;            #&quot;List of tables&quot; = List.Generate(&#13;&#10;                () =&gt; [Counter = 0, R = extract_series(0)],&#13;&#10;                each [Counter] &lt; List.Count(Source),&#13;&#10;                each [Counter = [Counter] + 1, R = extract_series([Counter] + 1)],&#13;&#10;                each [R]&#13;&#10;            ),&#13;&#10;&#13;&#10;            #&quot;Table&quot; = Table.Combine(#&quot;List of tables&quot;),&#13;&#10;            #&quot;Table unpivoted&quot; = Table.UnpivotOtherColumns(#&quot;Table&quot;, {&quot;Name&quot;}, &quot;Attribute&quot;, &quot;Value&quot;),&#13;&#10;            #&quot;Changed Type&quot; = Table.TransformColumnTypes(#&quot;Table unpivoted&quot;,{{&quot;Value&quot;, type number}, {&quot;Name&quot;, type datetime}}),&#13;&#10;            #&quot;Renamed Columns&quot; = Table.RenameColumns(#&quot;Changed Type&quot;,{{&quot;Attribute&quot;, &quot;Code&quot;}, {&quot;Name&quot;, &quot;DateTime&quot;}}),&#13;&#10;&#13;&#10;            // Specifying table format&#13;&#10;            format = if table_format &lt;&gt; null then table_format else &quot;long&quot;, // setting table long format to default to false&#13;&#10;            #&quot;Table format&quot; = if format = &quot;long&quot; then #&quot;Renamed Columns&quot; else Table.Pivot(#&quot;Renamed Columns&quot;, List.Distinct(#&quot;Renamed Columns&quot;[Code]), &quot;Code&quot;, &quot;Value&quot;)          &#13;&#10;        in&#13;&#10;            #&quot;Table format&quot;,//#&quot;Fist Request&quot;,&#13;&#10;&#13;&#10;        // Function type definition&#13;&#10;        &#13;&#10;        functionType = type function (&#13;&#10;            series_ids as ( type text meta [&#13;&#10;                Documentation.FieldCaption = &quot;Series Ids&quot;,&#13;&#10;                Documentation.SampleValues = {&quot;dehrprice, frhrprice, behrprice&quot;}&#13;&#10;            ]),&#13;&#10;            from_time as ( type text meta [&#13;&#10;                Documentation.FieldCaption = &quot;From Time&quot;,&#13;&#10;                Documentation.SampleValues = {&quot;today&quot;}&#13;&#10;            ]),&#13;&#10;            to_time as ( type text meta [&#13;&#10;                Documentation.FieldCaption = &quot;To Time&quot;,&#13;&#10;                Documentation.SampleValues = {&quot;today+28&quot;}&#13;&#10;            ]),&#13;&#10;            optional resolution as ( type text meta [&#13;&#10;                Documentation.FieldCaption = &quot;Resolution&quot;,&#13;&#10;                Documentation.AllowedValues = { &quot;hour&quot;, &quot;day&quot;, &quot;week&quot;, &quot;month&quot;, &quot;quarter&quot;, &quot;year&quot;, &quot;peak&quot;, &quot;offpeak&quot;, &quot;offpeak1&quot;, &quot;offpeak2&quot;, &quot;night&quot;, &quot;rushhour&quot;, &quot;offpeakweek&quot;, &quot;peakweek&quot;}&#13;&#10;            ]),&#13;&#10;            optional table_format as (type text meta [&#13;&#10;                Documentation.FieldCaption = &quot;Table Format&quot;,&#13;&#10;                Documentation.FieldDescription = &quot;Set the table format as either long or wide. Default (wide).&quot;,&#13;&#10;                Documentation.AllowedValues = {&quot;wide&quot;, &quot;long&quot;}&#13;&#10;            ]),&#13;&#10;            optional nena_username as ( type text meta [&#13;&#10;                Documentation.FieldCaption = &quot;Nena Username&quot;,&#13;&#10;                Documentation.FieldDescription = &quot;Your StormGeo Nena username (optional if defined as an Excel named range).&quot;&#13;&#10;            ]),&#13;&#10;            optional nena_password as ( type text meta [&#13;&#10;                Documentation.FieldCaption = &quot;Nena Password&quot;&#13;&#10;            ]))&#13;&#10;            as table meta [&#13;&#10;                Documentation.Name = &quot;fetchSeriesMulti&quot;,&#13;&#10;                Documentation.LongDescription = Lines.ToText(&#13;&#10;                    {&#13;&#10;                        &quot;Function for fetching multiple series in one request call from the StormGeo Nena API into an Excel table.&quot;,&#13;&#10;                        &quot;Series ids are passed as a string where each series id is separated using comma &quot;&quot;,&quot;&quot;.&quot;,&#13;&#10;                        &quot;Make sure that all series ids support the same resolution keywords. To match a series which only supports a weekly resolution&#13;&#10;                        with a series supporting hourly resolution you will need to specify the resolution keywords as &quot;&quot;week&quot;&quot;. &quot;,&#13;&#10;                        &quot;It is possible to return the table in either wide or long format by choosing the option as the table_format paramater. The default is wide format.&quot;,&#13;&#10;                        &quot;For details please see the documentation at https://docs.nena.no/api/&quot;&#13;&#10;                    }),&#13;&#10;                Documentation.Examples = {[&#13;&#10;                    Description = &quot;Returns a table with a Datetime, Code, and Value column&quot;,&#13;&#10;                    Code = &quot;fetchSeriesMulti(&quot;&quot;dehrprice, frhrprice, behrprice&quot;&quot;, &quot;&quot;today&quot;&quot;, &quot;&quot;today+28&quot;&quot;, &quot;&quot;hour&quot;&quot;)&quot;&#13;&#10;                ]}&#13;&#10;            ]&#13;&#10;in&#13;&#10;    Value.ReplaceType(&#13;&#10;        Source, functionType&#13;&#10;    )&#13;&#10;in&#13;&#10;    Source]]&gt;&lt;/Formula&gt;&lt;IsParameterQuery xsi:nil=&quot;true&quot; /&gt;&lt;IsDirectQuery xsi:nil=&quot;true&quot; /&gt;&lt;/Query&gt;&lt;/Items&gt;&lt;/Mashup&gt;</odc:PowerQueryMashupData>
 </odc:OfficeDataConnection>
</xml>
<style>
<!--
    .ODCDataSource
    {
    behavior: url(dataconn.htc);
    }
-->
</style>
 
</head>

<body onload='init()' scroll=no leftmargin=0 topmargin=0 rightmargin=0 style='border: 0px'>
<table style='border: solid 1px threedface; height: 100%; width: 100%' cellpadding=0 cellspacing=0 width='100%'> 
  <tr> 
    <td id=tdName style='font-family:arial; font-size:medium; padding: 3px; background-color: threedface'> 
      &nbsp; 
    </td> 
     <td id=tdTableDropdown style='padding: 3px; background-color: threedface; vertical-align: top; padding-bottom: 3px'>

      &nbsp; 
    </td> 
  </tr> 
  <tr> 
    <td id=tdDesc colspan='2' style='border-bottom: 1px threedshadow solid; font-family: Arial; font-size: 1pt; padding: 2px; background-color: threedface'>

      &nbsp; 
    </td> 
  </tr> 
  <tr> 
    <td colspan='2' style='height: 100%; padding-bottom: 4px; border-top: 1px threedhighlight solid;'> 
      <div id='pt' style='height: 100%' class='ODCDataSource'></div> 
    </td> 
  </tr> 
</table> 

  
<script language='javascript'> 

function init() { 
  var sName, sDescription; 
  var i, j; 
  
  try { 
    sName = unescape(location.href) 
  
    i = sName.lastIndexOf(".") 
    if (i>=0) { sName = sName.substring(1, i); } 
  
    i = sName.lastIndexOf("/") 
    if (i>=0) { sName = sName.substring(i+1, sName.length); } 

    document.title = sName; 
    document.getElementById("tdName").innerText = sName; 

    sDescription = document.getElementById("docprops").innerHTML; 
  
    i = sDescription.indexOf("escription>") 
    if (i>=0) { j = sDescription.indexOf("escription>", i + 11); } 

    if (i>=0 && j >= 0) { 
      j = sDescription.lastIndexOf("</", j); 

      if (j>=0) { 
          sDescription = sDescription.substring(i+11, j); 
        if (sDescription != "") { 
            document.getElementById("tdDesc").style.fontSize="x-small"; 
          document.getElementById("tdDesc").innerHTML = sDescription; 
          } 
        } 
      } 
    } 
  catch(e) { 

    } 
  } 
</script> 

</body> 
 
</html>
