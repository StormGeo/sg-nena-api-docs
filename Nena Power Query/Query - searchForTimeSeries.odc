<html xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/x-ms-odc; charset=utf-8">
<meta name=ProgId content=ODC.Database>
<meta name=SourceType content=OLEDB>
<title>Query - searchForTimeSeries(1)</title>
<xml id=docprops><o:DocumentProperties
  xmlns:o="urn:schemas-microsoft-com:office:office"
  xmlns="http://www.w3.org/TR/REC-html40">
  <o:Description>Connection to the 'searchForTimeSeries' query in the workbook.</o:Description>
  <o:Name>Query - searchForTimeSeries(1)</o:Name>
 </o:DocumentProperties>
</xml><xml id=msodc><odc:OfficeDataConnection
  xmlns:odc="urn:schemas-microsoft-com:office:odc"
  xmlns="http://www.w3.org/TR/REC-html40">
  <odc:PowerQueryConnection odc:Type="OLEDB">
   <odc:ConnectionString>Provider=Microsoft.Mashup.OleDb.1;Data Source=$Workbook$;Location=searchForTimeSeries;Extended Properties=&quot;&quot;</odc:ConnectionString>
   <odc:CommandType>SQL</odc:CommandType>
   <odc:CommandText>SELECT * FROM [searchForTimeSeries]</odc:CommandText>
  </odc:PowerQueryConnection>
  <odc:PowerQueryMashupData>&lt;Mashup xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://schemas.microsoft.com/DataMashup&quot;&gt;&lt;Client&gt;EXCEL&lt;/Client&gt;&lt;Version&gt;2.110.222.0&lt;/Version&gt;&lt;MinVersion&gt;2.21.0.0&lt;/MinVersion&gt;&lt;Culture&gt;nb-NO&lt;/Culture&gt;&lt;SafeCombine&gt;true&lt;/SafeCombine&gt;&lt;Items&gt;&lt;Query Name=&quot;searchForTimeSeries&quot;&gt;&lt;Formula&gt;&lt;![CDATA[let&#13;&#10;    Source = (optional prefix as text, optional nena_username as text, optional nena_password as text) =&gt;&#13;&#10;        let&#13;&#10;            // Checking that a username and password has been provided&#13;&#10;            username =&#13;&#10;                if nena_username is null then&#13;&#10;                    try&#13;&#10;                        Excel.CurrentWorkbook(){[Name = &quot;NENA_USERNAME&quot;]}[Content]{0}[Column1]&#13;&#10;                    otherwise&#13;&#10;                        error&#13;&#10;                            [&#13;&#10;                                Message.Format = &quot;No username found. You must provide a valid username as a function parameter or define a named range in the Excel&#13;&#10;                        workbook. The named range must be named exactly: NENA_USERNAME&quot;&#13;&#10;                            ]&#13;&#10;                else&#13;&#10;                    nena_username,&#13;&#10;            password =&#13;&#10;                if nena_password is null then&#13;&#10;                    try&#13;&#10;                        Excel.CurrentWorkbook(){[Name = &quot;NENA_PASSWORD&quot;]}[Content]{0}[Column1]&#13;&#10;                    otherwise&#13;&#10;                        error&#13;&#10;                            [&#13;&#10;                                Message.Format = &quot;No password found. You must provide a valid password as a function parameter or define a named range in the Excel&#13;&#10;                        workbook. The named range must be named exactly: NENA_PASSWORD&quot;&#13;&#10;                            ]&#13;&#10;                else&#13;&#10;                    nena_password,&#13;&#10;            checkForNullResponse = (resp) =&gt;&#13;&#10;                // Cathcing the octet-stream error.&#13;&#10;                let&#13;&#10;                    metadata = Value.Metadata(resp), #&quot;Status&quot; = if metadata[Response.Status] &lt;&gt; 200 then false else true&#13;&#10;                in&#13;&#10;                    #&quot;Status&quot;,&#13;&#10;            // FETCHING TOKEN&#13;&#10;            token_url = &quot;https://api.nena.no/api/user/login&quot;,&#13;&#10;            headers_token = [#&quot;Content-Type&quot; = &quot;application/json&quot;],&#13;&#10;            postToken = Json.FromValue([UserName = username, Password = password]),&#13;&#10;            token_response = Web.Contents(token_url, [&#13;&#10;                Headers = headers_token,&#13;&#10;                Content = postToken&#13;&#10;            ]),&#13;&#10;            token =&#13;&#10;                if checkForNullResponse(token_response) then&#13;&#10;                    Json.Document(token_response)[Token]&#13;&#10;                else&#13;&#10;                    error Error.Record(&quot;Authentication Error&quot;, &quot;Your username or password is incorrect.&quot;),&#13;&#10;            // Return a token, otherwise raise error.&#13;&#10;            // FETCHING SERIES&#13;&#10;            ConvertResponse = (resp) =&gt;&#13;&#10;                // Converts and transforms API response to table&#13;&#10;                let&#13;&#10;                    #&quot;Converted to Table&quot; = Table.FromList(&#13;&#10;                        jsonResponse, Splitter.SplitByNothing(), null, null, ExtraValues.Error&#13;&#10;                    ),&#13;&#10;                    #&quot;Expanded Columns&quot; = Table.ExpandRecordColumn(&#13;&#10;                        #&quot;Converted to Table&quot;,&#13;&#10;                        &quot;Column1&quot;,&#13;&#10;                        {&#13;&#10;                            &quot;lastupdated&quot;,&#13;&#10;                            &quot;resolution_name&quot;,&#13;&#10;                            &quot;startdate&quot;,&#13;&#10;                            &quot;enddate&quot;,&#13;&#10;                            &quot;Code&quot;,&#13;&#10;                            &quot;Description&quot;,&#13;&#10;                            &quot;Unit&quot;,&#13;&#10;                            &quot;Resolution&quot;&#13;&#10;                        },&#13;&#10;                        {&#13;&#10;                            &quot;lastupdated&quot;,&#13;&#10;                            &quot;resolution_name&quot;,&#13;&#10;                            &quot;startdate&quot;,&#13;&#10;                            &quot;enddate&quot;,&#13;&#10;                            &quot;Code&quot;,&#13;&#10;                            &quot;Description&quot;,&#13;&#10;                            &quot;Unit&quot;,&#13;&#10;                            &quot;Resolution&quot;&#13;&#10;                        }&#13;&#10;                    ),&#13;&#10;                    #&quot;Changing Data Types&quot; = Table.TransformColumnTypes(&#13;&#10;                        #&quot;Expanded Columns&quot;,&#13;&#10;                        {{&quot;lastupdated&quot;, type datetime}, {&quot;startdate&quot;, type datetime}, {&quot;enddate&quot;, type datetime}}&#13;&#10;                    )&#13;&#10;                in&#13;&#10;                    #&quot;Changing Data Types&quot;,&#13;&#10;            postData = Json.FromValue([&#13;&#10;                Prefix = if prefix is null then &quot;&quot; else prefix,&#13;&#10;                UserInfo = [&#13;&#10;                    UserName = username,&#13;&#10;                    Token = token&#13;&#10;                ]&#13;&#10;            ]),&#13;&#10;            url = &quot;https://api.nena.no/api/fundamental/meta/all&quot;,&#13;&#10;            headers = [#&quot;Content-Type&quot; = &quot;application/json&quot;, #&quot;Accept&quot; = &quot;application/json&quot;],&#13;&#10;            response = Web.Contents(url, [&#13;&#10;                Headers = headers,&#13;&#10;                Content = postData&#13;&#10;            ]),&#13;&#10;            jsonResponse = Json.Document(response),&#13;&#10;            #&quot;Finished Dataset&quot; =&#13;&#10;                if List.IsEmpty(jsonResponse) then&#13;&#10;                    error&#13;&#10;                        [&#13;&#10;                            Message.Format = &quot;No content: input parameters '#{0}' is not a valid prefix.&quot;,&#13;&#10;                            Message.Parameters = {prefix}&#13;&#10;                        ]&#13;&#10;                else&#13;&#10;                    ConvertResponse(jsonResponse)&#13;&#10;        in&#13;&#10;            #&quot;Finished Dataset&quot;,&#13;&#10;&#13;&#10;            functionType = type function (&#13;&#10;                optional prefix as ( type text meta [&#13;&#10;                    Documentation.FieldCaption = &quot;Prefix&quot;,&#13;&#10;                    Documentation.SampleValues = {&quot;de&quot;}&#13;&#10;                ]),&#13;&#10;                optional nena_username as ( type text meta [&#13;&#10;                    Documentation.FieldCaption = &quot;Nena Username&quot;,&#13;&#10;                    Documentation.FieldDescription = &quot;Your StormGeo Nena username (optional if defined as an Excel named range).&quot;&#13;&#10;                ]),&#13;&#10;                optional nena_password as ( type text meta [&#13;&#10;                    Documentation.FieldCaption = &quot;Nena Password&quot;&#13;&#10;                ]))&#13;&#10;                as table meta [&#13;&#10;                    Documentation.Name = &quot;searchForTimeSeries&quot;,&#13;&#10;                    Documentation.LongDescription = Lines.ToText(&#13;&#10;                        {&#13;&#10;                            &quot;Given a prefix, the function establish a connection to the StormGeo Nena API and fetches metadata for all series with a matching series id prefix. The data is loaded into Excel as a table object.&quot;,&#13;&#10;                            &quot;An empty Prefix field will return all series from the API. For details please see the documentation at https://docs.nena.no/api/&quot;&#13;&#10;                        }),&#13;&#10;                    Documentation.Examples = {[&#13;&#10;                        Description = &quot;Returns a table with columns containing metadata for each series id maching the prefix.&quot;,&#13;&#10;                        Code = &quot;searchForTimeSeries(&quot;&quot;de&quot;&quot;)&quot;&#13;&#10;                    ]}&#13;&#10;                ]&#13;&#10;&#13;&#10;in&#13;&#10;    Value.ReplaceType(&#13;&#10;        Source, functionType&#13;&#10;    )]]&gt;&lt;/Formula&gt;&lt;IsParameterQuery xsi:nil=&quot;true&quot; /&gt;&lt;IsDirectQuery xsi:nil=&quot;true&quot; /&gt;&lt;/Query&gt;&lt;/Items&gt;&lt;/Mashup&gt;</odc:PowerQueryMashupData>
 </odc:OfficeDataConnection>
</xml>
<style>
<!--
    .ODCDataSource
    {
    behavior: url(dataconn.htc);
    }
-->
</style>
 
</head>

<body onload='init()' scroll=no leftmargin=0 topmargin=0 rightmargin=0 style='border: 0px'>
<table style='border: solid 1px threedface; height: 100%; width: 100%' cellpadding=0 cellspacing=0 width='100%'> 
  <tr> 
    <td id=tdName style='font-family:arial; font-size:medium; padding: 3px; background-color: threedface'> 
      &nbsp; 
    </td> 
     <td id=tdTableDropdown style='padding: 3px; background-color: threedface; vertical-align: top; padding-bottom: 3px'>

      &nbsp; 
    </td> 
  </tr> 
  <tr> 
    <td id=tdDesc colspan='2' style='border-bottom: 1px threedshadow solid; font-family: Arial; font-size: 1pt; padding: 2px; background-color: threedface'>

      &nbsp; 
    </td> 
  </tr> 
  <tr> 
    <td colspan='2' style='height: 100%; padding-bottom: 4px; border-top: 1px threedhighlight solid;'> 
      <div id='pt' style='height: 100%' class='ODCDataSource'></div> 
    </td> 
  </tr> 
</table> 

  
<script language='javascript'> 

function init() { 
  var sName, sDescription; 
  var i, j; 
  
  try { 
    sName = unescape(location.href) 
  
    i = sName.lastIndexOf(".") 
    if (i>=0) { sName = sName.substring(1, i); } 
  
    i = sName.lastIndexOf("/") 
    if (i>=0) { sName = sName.substring(i+1, sName.length); } 

    document.title = sName; 
    document.getElementById("tdName").innerText = sName; 

    sDescription = document.getElementById("docprops").innerHTML; 
  
    i = sDescription.indexOf("escription>") 
    if (i>=0) { j = sDescription.indexOf("escription>", i + 11); } 

    if (i>=0 && j >= 0) { 
      j = sDescription.lastIndexOf("</", j); 

      if (j>=0) { 
          sDescription = sDescription.substring(i+11, j); 
        if (sDescription != "") { 
            document.getElementById("tdDesc").style.fontSize="x-small"; 
          document.getElementById("tdDesc").innerHTML = sDescription; 
          } 
        } 
      } 
    } 
  catch(e) { 

    } 
  } 
</script> 

</body> 
 
</html>
